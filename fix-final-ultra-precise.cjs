/**
 * Script ULTRA PRECISO - Solo corrige los 2 problemas reales
 * Ejecutar: node fix-final-ultra-precise.cjs
 */

const fs = require('fs');

console.log('\nüéØ Aplicando correcciones ultra precisas...\n');

try {
  let content = fs.readFileSync('src/App.jsx', 'utf8');
  const originalContent = content;
  let changes = 0;

  // CORRECCI√ìN 1: L√≠nea 216 - Optional chaining
  // suggestions‚úì.length ‚Üí suggestions?.length
  console.log('1Ô∏è‚É£ Corrigiendo optional chaining en l√≠nea 216...');
  const before1 = content;
  content = content.replace(
    /qualityAnalysis\.suggestions‚úì\.length/g,
    'qualityAnalysis.suggestions?.length'
  );
  if (content !== before1) {
    console.log('   ‚úì suggestions‚úì.length ‚Üí suggestions?.length');
    changes++;
  }

  // CORRECCI√ìN 2: L√≠nea 923 - URL query parameter
  // 400x500‚úìtext=No ‚Üí 400x500?text=No
  console.log('\n2Ô∏è‚É£ Corrigiendo URL query parameter en l√≠nea 923...');
  const before2 = content;
  content = content.replace(
    /400x500‚úìtext=/g,
    '400x500?text='
  );
  if (content !== before2) {
    console.log('   ‚úì 400x500‚úìtext= ‚Üí 400x500?text=');
    changes++;
  }

  // Guardar archivo si hubo cambios
  if (content !== originalContent) {
    fs.writeFileSync('src/App.jsx', content, 'utf8');
    console.log('\n‚úÖ Archivo actualizado correctamente');
    console.log(`   Total de correcciones: ${changes}`);
  } else {
    console.log('\n‚ÑπÔ∏è  No se encontraron problemas que corregir');
  }

  // Verificaci√≥n final
  console.log('\n' + '='.repeat(80));
  console.log('üîç VERIFICACI√ìN FINAL');
  console.log('='.repeat(80) + '\n');

  const lines = content.split('\n');
  let problemsFound = 0;

  // Buscar checkmarks problem√°ticos (fuera de strings)
  lines.forEach((line, index) => {
    const lineNumber = index + 1;
    const trimmed = line.trim();
    
    // Ignorar comentarios
    if (trimmed.startsWith('//') || trimmed.startsWith('/*')) return;
    
    // Ignorar strings (console.log, etc)
    if (/console\.(log|error)\(['"]‚úì/.test(line)) return;
    
    // Buscar checkmarks problem√°ticos
    if (line.includes('‚úì')) {
      // Verificar si est√° fuera de strings
      const withoutStrings = line.replace(/(["'`]).*?\1/g, ''); // Eliminar contenido de strings
      if (withoutStrings.includes('‚úì')) {
        console.log(`‚ö†Ô∏è  L√≠nea ${lineNumber}: ${trimmed.substring(0, 80)}`);
        problemsFound++;
      }
    }
  });

  if (problemsFound === 0) {
    console.log('‚úÖ ¬°PERFECTO! No quedan problemas de encoding.');
    console.log('');
    console.log('üìã PR√ìXIMOS PASOS:');
    console.log('   git diff src/App.jsx');
    console.log('   git add src/App.jsx');
    console.log('   git commit -m "fix: correcci√≥n final encoding - optional chaining y URL"');
    console.log('   git push');
    console.log('');
  } else {
    console.log(`\n‚ö†Ô∏è  Se encontraron ${problemsFound} problemas adicionales.`);
    console.log('    Por favor revisa el reporte arriba.\n');
  }

} catch (error) {
  console.error('‚ùå Error:', error.message);
  process.exit(1);
}
